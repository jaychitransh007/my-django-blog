cd %homepath% /Desktop/Python/learning/django_app

myvenv\Scripts\activate

django-admin.exe startproject mysite .

python manage.py migrate

python manage.py runserver

# Creating a separate application inside the project
python manage.py startapp blog


# After creating an application, we also need to tell Django that it should use it.
# We do that in the file mysite/settings.py -- open it in your code editor.
# We need to find INSTALLED_APPS and add a line containing 'blog.apps.BlogConfig', just above ]. So the final product should look like this:

# First we have to make Django know that we have some changes in our model. (We have just created it!)
python manage.py makemigrations blog


# Django prepared a migration file for us that we now have to apply to our database.
python manage.py migrate blog

# /admin screen
# Create Super User
python manage.py createsuperuser

# More about Django Admin - https://docs.djangoproject.com/en/2.2/ref/contrib/admin/

# Intializing git
git init

# Git will track changes to all the files and folders in this directory, but there are some files we want it to ignore.
# We do this by creating a file called .gitignore in the base directory.

# It's a good idea to use a git status command before git add or whenever you find yourself unsure of what has changed.
# This will help prevent any surprises from happening, such as wrong files being added or committed.
# The git status command returns information about any untracked/modified/staged files, the branch status, and much more.
git status

git add --all .

git commit -m "My Django Girls app, first commit"

git push

# In Web Server (PythonAnywhere in this case)
  cd ~/jaychitransh007.pythonanywhere.com
  git pull

# After crating repository on Github, we need to hook up the Git repository on our computer to the one up on GitHub.

#Importing code on PythonAnywhere server

pip3.6 install pythonanywhere

pa_autoconfigure_django.py --python=3.6 https://github.com/<your-github-username>/my-first-blog.git

# Steps on running the above commands
  #1 Downloading your code from GitHub
  #2 Creating a virtualenv on PythonAnywhere, just like the one on your own computer
  #3 Updating your settings file with some deployment settings
  #4 Setting up a database on PythonAnywhere using the manage.py migrate command
  #5 Setting up your static files (we'll learn about these later)
  #6 And configuring PythonAnywhere to serve your web app via its API
# On PythonAnywhere all those steps are automated, but they're the same steps you would have to go through with any other server provider.
# Also, The main thing to notice right now is that your database on PythonAnywhere is actually totally separate from your database on your own computer,
  so it can have different posts and admin accounts.
# As a result, just as we did on your own computer, we need to initialize the admin account with createsuperuser.

python manage.py createsuperuser

#If you see an error while running the pa_autoconfigure_django.py script, here are a few common causes:

  #1 Forgetting to create your PythonAnywhere API token.
  #2 Making a mistake in your GitHub URL
  #3 If you see an error saying "Could not find your settings.py",
    it's probably because you didn't manage to add all your files to Git, and/or you didn't push them up to GitHub successfully. Have another look at the Git section above
  #4 If you previously signed up for a PythonAnywhere account and had an error with collectstatic,
    you probably have an older version of SQLite (eg 3.8.2) for your account.
    In that case, sign up for a new account and try the commands in the PythonAnywhere section above.

# If you see an error when you try to visit your site, the first place to look for some debugging info is in your error log.
# You'll find a link to this on the PythonAnywhere "Web" page.
# See if there are any error messages in there; the most recent ones are at the bottom

# This is a common workflow in web development â€“ make changes locally, push those changes to GitHub, and pull your changes down to your live Web server.
# This allows you to work and experiment without breaking your live Web site.


# Django Shell
python manage.py shell
from blog.models import Post
# Create Object

# Importing Users objects as we need this to create the blogs
from django.contrib.auth.models import User
User.objects.all()
me = User.objects.get(username = 'mj')
Post.objects.create(author=me, title='My Blog using Python', text='Test')

# First get an instance of a post we want to publish
post = Post.objects.get(title = 'My Blog using Python')
post.publish()

# Let's say we want to find all posts that user ola authored. We will use filter instead of all
Post.objects.filter(author = me)

# There are two underscore characters (_) between title and contains.
# Django's ORM uses this rule to separate field names ("title") and operations or filters ("contains").
# If you use only one underscore, you'll get an error like "FieldError: Cannot resolve keyword title_contains".
Post.objects.filter(title__contains='title')

# Ordering Blog posts
Post.objects.order_by('created_date')


-------------------------------------
DYANAMIC DATA IN TEMPLATES
# We have different pieces in place: the Post model is defined in models.py, we have post_list in views.py and the template added.
# views connect models and templates
#  In our post_list view we will need to take the models we want to display and pass them to the template.
# In a view we decide what (model) will be displayed in a template

#  the previous chapter we gave our template a list of posts in the posts variable. Now we will display it in HTML.
# To print a variable in Django templates, we use double curly brackets with the variable's name inside, like this:
{{ posts }}

# we want the posts to be displayed like the static posts we created earlier in the Introduction to HTML chapter.
# We can mix HTML and template tags.

# Everything you put between {% for %} and {% endfor %} will be repeated for each object in the list.


--------------------------------------------------
INSTALL BOOTSTRAP
# Add follwing commands in HTML files
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css">

# Finally we will take a closer look at these things we've been calling static files. Static files are all your CSS and images.
# Their content doesn't depend on the request context and will be the same for every user.

# We also identify elements by the attribute class or the attribute id. Class and id are names you give the element by yourself.
http://www.w3schools.com/cssref/css_selectors.asp

# "Basic HTML & HTML5" and "Basic CSS" on freeCodeCamp

------------------------------------------------------
TEMPLATE EXTENDING
But why? You just created a block! You used the template tag {% block %} to make an area that will have HTML inserted in it.
That HTML will come from another template that extends this template (base.html).

------------------------------------------------------
EXTENDING APPLICATION
# The post_detail part means that Django will be expecting a URL in blog/urls.py with name=post_detail
# pk=post.pk? pk is short for primary key, which is a unique identifier for each record in a database
# Every Django model has a field which serves as its primary key, and whatever other name it has, it can also be referred to as "pk".
# Because we didn't specify a primary key in our Post model,
#   Django creates one for us (by default, a field named "id" holding a number that increases for each record, i.e. 1, 2, 3) and adds it as a field to each of our posts.
# We access the primary key by writing post.pk, the same way we access other fields (title, author, etc.) in our Post object!


# We want our first post's detail to be displayed at this URL: http://127.0.0.1:8000/post/1/
